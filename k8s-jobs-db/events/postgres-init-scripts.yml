apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts-events
  namespace: swyw
data:
  01-create-db.sh: |
    #!/bin/bash
    set -e

    DB_NAME=${DB_NAME_AUTH:-swyw_events}
    DB_ADMIN_PASSWORD=${DB_ADMIN_PASSWORD:-default}
    DB_APP_USER_PASSWORD=${DB_APP_USER_PASSWORD:-default}
    POSTGRES_USER=${POSTGRES_USER:-${PGUSER}}
    DB_HOST=${DB_HOST:-database-events.postgres.svc.cluster.local}
    DB_PORT=${DB_PORT_2:-5433}

    echo "=== Creando base de datos ==="
    psql -h "$DB_HOST" -p "$DB_PORT" -U "$POSTGRES_USER" -tc "SELECT 1 FROM pg_database WHERE datname = '$DB_NAME'" | grep -q 1 || \
    psql -h "$DB_HOST" -p "$DB_PORT" -U "$POSTGRES_USER" -c "CREATE DATABASE $DB_NAME"

    echo "=== Creando roles ==="
    psql -h "$DB_HOST" -p "$DB_PORT" -U "$POSTGRES_USER" -tc "SELECT 1 FROM pg_roles WHERE rolname='db_admin'" | grep -q 1 || \
    psql -h "$DB_HOST" -p "$DB_PORT" -U "$POSTGRES_USER" -c "CREATE ROLE db_admin LOGIN PASSWORD '$DB_ADMIN_PASSWORD' SUPERUSER;"

    psql -h "$DB_HOST" -p "$DB_PORT" -U "$POSTGRES_USER" -tc "SELECT 1 FROM pg_roles WHERE rolname='app_user'" | grep -q 1 || \
    psql -h "$DB_HOST" -p "$DB_PORT" -U "$POSTGRES_USER" -c "CREATE ROLE app_user LOGIN PASSWORD '$DB_APP_USER_PASSWORD';"

    echo "=== Configurando esquema y permisos ==="
    psql -h "$DB_HOST" -p "$DB_PORT" -U "$POSTGRES_USER" -d "$DB_NAME" << EOF
    CREATE SCHEMA IF NOT EXISTS core AUTHORIZATION app_user;
    REVOKE ALL ON SCHEMA public FROM PUBLIC;
    GRANT USAGE, CREATE ON SCHEMA core TO app_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA core GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO app_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA core GRANT USAGE, SELECT ON SEQUENCES TO app_user;
    EOF

    echo "=== InicializaciÃ³n completada ==="

  02-schema.sql: |
    \c swyw_events;
     CREATE TABLE IF NOT EXISTS core.events_type (
         "id" SERIAL,
         "name" varchar(100) NOT NULL,
         "sort_order" integer NOT NULL,
         CONSTRAINT "pk_event_type_id" PRIMARY KEY ("id")
     );

     CREATE TABLE IF NOT EXISTS core.events (
         "id" SERIAL,
         "description" varchar(255) NOT NULL,
         "date" timestamp NOT NULL,
         "participants" varchar(255) NOT NULL,
         "remember" boolean NOT NULL,
         "type_event_id" integer NOT NULL,
         "user_id" integer NOT NULL,
         "title" text,
         "completed" boolean NOT NULL,
         CONSTRAINT "pk_Events_id" PRIMARY KEY ("id")
     );


     -- Foreign key constraints
     -- Schema: core
     ALTER TABLE core.events ADD CONSTRAINT "fk_type_event_id_event_type_id" FOREIGN KEY ("type_event_id") REFERENCES core.events_type ("id");
